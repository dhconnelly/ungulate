# ungulate

a tiny scheme-like interpreter written in ocaml as an exercise

to build and run:

    ocamlopt main.ml
    ./a.out <path>

some test programs are provided in the examples/ directory.

## features

` `if` expressions that evaluate to the value of the chosen branch
- `seq` expressions that evaluate all their subexpressions and return
  the value of the final one, or Nil if empty
- `define` statements for local bindings. these evaluate to nil and
  always introduce a new scope, i.e. they don't modify previously
  captured environments
- `lambda` expressions that close over their environment
- integers and booleans

TODO

x scanner (done)
x parser (done)
x eval: literals (done)
x eval: ifs (done)
x eval: built-ins (done)
x eval: define
x eval: seq
- eval: lambda
- eval: recursive defines
