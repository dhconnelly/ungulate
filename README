# ungulate

a tiny scheme-like interpreter written in ocaml as an exercise

## how

to build and run:

    ocamlopt main.ml
    ./a.out <path>

some test programs are provided in the examples/ directory.

## features

` `if` expressions that evaluate to the value of the chosen branch
- `seq` expressions that evaluate all their subexpressions and return
  the value of the final one, or Nil if empty
- `define` statements for local bindings. these evaluate to nil and
  always introduce a new scope, i.e. they don't modify previously
  captured environments
- `lambda` expressions that close over their environment
- named `lambda`s to support recursion
- integers and booleans

## status

done

## about

written by Daniel Connelly (dhconnelly@gmail.com) and released under
the MIT license (see LICENSE file)
